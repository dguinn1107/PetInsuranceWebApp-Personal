using System.Data.SqlTypes;

public class QuickQuoteModel
{
    // Private backing fields
    private string name;
    private string email;
    private string phone;
    private string petName;
    private string petBreed;
    private int petAge;
    private bool homeOwner;
    private string healthStatus;

    private int premium;   // calculated later
    private int quoteId;   // generated by server

    // Public getters (optional)
    public string Name => name;
    public string Email => email;
    public string Phone => phone;
    public string PetName => petName;
    public string PetBreed => petBreed;
    public int PetAge => petAge;
    public bool HomeOwner => homeOwner;
    public string HealthStatus => healthStatus;
    public int Premium => premium;
    public int QuoteId => quoteId;

    public QuickQuoteModel(
        string name,
        string email,
        string phone,
        string petName,
        string petBreed,
        int petAge,
        bool homeOwner,
        string healthStatus)
    {
        if (string.IsNullOrEmpty(name) ||
            string.IsNullOrEmpty(email) ||
            string.IsNullOrEmpty(phone) ||
            string.IsNullOrEmpty(petName) ||
            string.IsNullOrEmpty(petBreed))
        {
            throw new ArgumentException("All fields must be provided.");
        }

        if (petAge < 0)
            throw new ArgumentOutOfRangeException(nameof(petAge), "Pet age cannot be negative.");

        if (!email.Contains("@") || !email.Contains("."))
            throw new ArgumentException("Invalid email format.");

        if (phone.Length < 10 || phone.Length > 15)
            throw new ArgumentException("Phone number must be between 10 and 15 characters.");

        if (!homeOwner)
            throw new ArgumentException("Must be a homeowner to get a quote.");

        // Assign after validation
        this.name = name;
        this.email = email;
        this.phone = phone;
        this.petName = petName;
        this.petBreed = petBreed;
        this.petAge = petAge;
        this.homeOwner = homeOwner;
        this.healthStatus = healthStatus;
    }

    // Example of a method to calculate premium
    public void GenerateQuickQuote()
    {
        // Simple example: base premium + age factor + breed factor (just placeholders)
        int basePremium = 100;
        int ageFactor = petAge * 10;
        int breedFactor = petBreed.Length * 5; // dummy logic

        premium = basePremium + ageFactor + breedFactor;
    }

    

}




